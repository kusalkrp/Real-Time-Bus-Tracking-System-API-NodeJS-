name: Deploy to EC2

on:
  push:
    branches:
      - release-V1.0
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "üöÄ Starting deployment..."
            
            cd ~/bus-tracking || { echo "‚ùå Project directory not found"; exit 1; }
            
            echo "üì• Pulling latest changes..."
            git pull origin release-V1.0
            
            echo "üõë Stopping existing containers..."
            docker-compose down
            
            # Force database reset to populate initial data from init.sql
            echo "üîÑ Force database reset to populate routes and buses data..."
            
            # Check and load environment variables
            echo "üîß Loading environment variables..."
            if [ ! -f .env ]; then
                echo "‚ùå .env file not found!"
                exit 1
            fi
            
            # Export environment variables explicitly
            export DB_NAME="bus_tracking_db"
            export DB_USER="postgres" 
            export DB_PASSWORD="postgres123"
            
            echo "üìã Using database config:"
            echo "   DB_NAME: $DB_NAME"
            echo "   DB_USER: $DB_USER"
            
            docker-compose down -v
            
            echo "üßπ Cleaning up old Docker data..."
            docker system prune -af --volumes || true

            echo "üèóÔ∏è Building and starting containers with fresh database..."
            docker-compose up -d --build
            
            echo "‚è≥ Waiting for services to start and init.sql to run..."
            sleep 60  # Give extra time for PostgreSQL init scripts
            
            echo "üîç Checking container status..."
            docker-compose ps
            
            echo "üìä Verifying database data population..."
            
            # Wait for database to be fully ready and init.sql to complete
            echo "‚è≥ Waiting for database initialization..."
            for i in {1..30}; do
                echo "Checking database status... (attempt $i/30)"
                
                # Check if postgres is accepting connections
                if docker-compose exec -T postgres pg_isready -U postgres -d postgres >/dev/null 2>&1; then
                    echo "‚úÖ PostgreSQL is accepting connections"
                    
                    # Check if our database exists
                    if docker-compose exec -T postgres psql -U postgres -lqt 2>/dev/null | cut -d\| -f1 | grep -qw bus_tracking_db; then
                        echo "‚úÖ Database 'bus_tracking_db' exists"
                        break
                    else
                        echo "‚è≥ Database 'bus_tracking_db' not found yet, waiting..."
                    fi
                else
                    echo "‚è≥ PostgreSQL not ready yet, waiting..."
                fi
                
                sleep 10
                
                if [ $i -eq 10 ]; then
                    echo "‚ùå Database initialization timeout"
                    echo "üîç Debugging information:"
                    echo "   PostgreSQL logs:"
                    docker-compose logs postgres --tail=20
                    exit 1
                fi
            done
            
            # Now check if routes and buses data was populated
            ROUTES_COUNT=$(docker-compose exec -T postgres psql -U postgres -d bus_tracking_db -c "SELECT COUNT(*) FROM routes;" --quiet --tuples-only | tr -d ' ')
            BUSES_COUNT=$(docker-compose exec -T postgres psql -U postgres -d bus_tracking_db -c "SELECT COUNT(*) FROM buses;" --quiet --tuples-only | tr -d ' ')
            
            echo "üìà Database population results:"
            echo "   Routes: $ROUTES_COUNT (expected: 5)"
            echo "   Buses: $BUSES_COUNT (expected: 25)"
            
            echo "üìà Database population results:"
            echo "   Routes: $ROUTES_COUNT (expected: 5)"
            echo "   Buses: $BUSES_COUNT (expected: 25)"
            
            echo "üìà Database population results:"
            echo "   Routes: $ROUTES_COUNT (expected: 5)"
            echo "   Buses: $BUSES_COUNT (expected: 25)"
            
            if [ "$ROUTES_COUNT" -eq 5 ] && [ "$BUSES_COUNT" -eq 25 ]; then
                echo "‚úÖ Database populated successfully!"
            else
                echo "‚ùå Database population failed or incomplete"
                exit 1
            fi
            

            
            echo "üéâ Deployment completed successfully!"
          EOF

      - name: Health Check
        run: |
          echo "üè• Running health check..."
          sleep 20  # extra wait for Traefik and HTTPS
          
          response=$(curl -sk -o /dev/null -w "%{http_code}" https://busapi.duckdns.org/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed - API is responding"
          else
            echo "‚ùå Health check failed - API returned status: $response"
            exit 1
          fi

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
